name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  # Tests Backend Laravel
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: ascbp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, gd, zip
          coverage: xdebug

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Setup environment
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Configure test database
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=ascbp_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test --coverage

      - name: Run static analysis
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Check code style
        run: ./vendor/bin/pint --test

  # Tests Frontend Vue.js
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run frontend tests
        run: npm run test:unit
        continue-on-error: true # Ajustez selon vos besoins

      - name: Build frontend
        run: npm run build

  # Build et test Docker
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ascbp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Créer les fichiers de configuration nécessaires pour le test
          mkdir -p docker
          echo "events { worker_connections 1024; }" > docker/nginx.conf
          echo "http { server { listen 80; root /var/www/html/public; index index.php; location / { try_files \$uri \$uri/ /index.php?\$query_string; } location ~ \.php$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; } } }" >> docker/nginx.conf

          echo "[supervisord]" > docker/supervisord.conf
          echo "nodaemon=true" >> docker/supervisord.conf
          echo "[program:nginx]" >> docker/supervisord.conf
          echo "command=nginx -g 'daemon off;'" >> docker/supervisord.conf
          echo "[program:php-fpm]" >> docker/supervisord.conf
          echo "command=php-fpm" >> docker/supervisord.conf

          echo "upload_max_filesize = 10M" > docker/php/php.ini
          echo "post_max_size = 10M" >> docker/php/php.ini

          # Test de build avec les fichiers de config
          docker build -t ascbp:test .

  # Déploiement (uniquement sur main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /home/deploy/ascbp-deployment
            git pull origin main
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
            
            # Attendre que l'application soit prête
            sleep 30
            
            # Exécuter les migrations
            docker-compose exec -T app php artisan migrate --force
            
            # Optimiser l'application
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            
            # Vérifier la santé de l'application
            docker-compose exec -T app php artisan about
          EOF

      - name: Health check
        run: |
          sleep 60
          curl -f ${{ secrets.APP_URL }}/api/health || exit 1

  # Notification (optionnel)
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: echo "✅ Déploiement réussi!"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: echo "❌ Échec du déploiement"
