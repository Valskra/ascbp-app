version: '3.8'

services:
    # Base de données MySQL
    db:
        image: mysql:8.0
        container_name: ascbp_db
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: ascbp
            MYSQL_USER: ascbp_user
            MYSQL_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password_change_me}
        volumes:
            - db_data:/var/lib/mysql
            - ./docker/mysql/init:/docker-entrypoint-initdb.d
        networks:
            - ascbp_network
        healthcheck:
            test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
            timeout: 20s
            retries: 10

    # Cache Redis (optionnel mais recommandé)
    redis:
        image: redis:7-alpine
        container_name: ascbp_redis
        restart: unless-stopped
        command: redis-server --appendonly yes
        volumes:
            - redis_data:/data
        networks:
            - ascbp_network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 3s
            retries: 3

    # Application Laravel (Backend + Frontend intégré)
    app:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: ascbp_app
        restart: unless-stopped
        working_dir: /var/www/html
        environment:
            # Base
            - APP_NAME=ASCBP
            - APP_ENV=production
            - APP_DEBUG=false
            - APP_URL=${APP_URL:-http://localhost}

            # Base de données
            - DB_CONNECTION=mysql
            - DB_HOST=db
            - DB_PORT=3306
            - DB_DATABASE=ascbp
            - DB_USERNAME=ascbp_user
            - DB_PASSWORD=${DB_PASSWORD:-secure_password_change_me}

            # Cache et sessions
            - CACHE_STORE=redis
            - SESSION_DRIVER=redis
            - REDIS_HOST=redis
            - REDIS_PORT=6379

            # S3 Storage (OVH)
            - FILESYSTEM_DISK=s3
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - AWS_DEFAULT_REGION=sbg
            - AWS_BUCKET=ascbp-s3
            - AWS_ENDPOINT=https://s3.sbg.io.cloud.ovh.net
            - AWS_USE_PATH_STYLE_ENDPOINT=true
            - AWS_URL=https://ascbp-s3.s3.sbg.io.cloud.ovh.net

            # Mail (à configurer selon vos besoins)
            - MAIL_MAILER=smtp
            - MAIL_HOST=${MAIL_HOST:-localhost}
            - MAIL_PORT=${MAIL_PORT:-587}
            - MAIL_USERNAME=${MAIL_USERNAME}
            - MAIL_PASSWORD=${MAIL_PASSWORD}
            - MAIL_ENCRYPTION=tls
            - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS:-hello@ascbp.fr}
            - MAIL_FROM_NAME="ASCBP"

        volumes:
            - app_storage:/var/www/html/storage
            - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini

        networks:
            - ascbp_network

        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy

        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost/api/health']
            interval: 30s
            timeout: 10s
            retries: 3

    # Proxy inverse Caddy (serveur web + HTTPS)
    caddy:
        image: caddy:2-alpine
        container_name: ascbp_caddy
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        environment:
            - DOMAIN=${DOMAIN:-localhost}
        volumes:
            - ./docker/Caddyfile:/etc/caddy/Caddyfile
            - caddy_data:/data
            - caddy_config:/config
        networks:
            - ascbp_network
        depends_on:
            - app

networks:
    ascbp_network:
        driver: bridge

volumes:
    db_data:
        driver: local
    redis_data:
        driver: local
    app_storage:
        driver: local
    caddy_data:
        driver: local
    caddy_config:
        driver: local
